'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

;(function () {
	"use strict";

	var PasswordGeneratorCore = function () {
		function PasswordGeneratorCore() {
			_classCallCheck(this, PasswordGeneratorCore);
		}

		_createClass(PasswordGeneratorCore, null, [{
			key: 'getRandomChar',
			value: function getRandomChar(selectedCharTypes) {
				var types = selectedCharTypes && selectedCharTypes.length && selectedCharTypes || this.presets.charTypes;
				var randomCharType = types[Math.floor(Math.random() * types.length)];
				var charsetByType = this.presets.charset[randomCharType];
				var randomChar = charsetByType[Math.floor(Math.random() * charsetByType.length)];
				return randomChar;
			}
		}, {
			key: 'generatePassword',
			value: function generatePassword(len, selectedCharTypes) {
				var _this = this;

				len = len || this.presets.length;
				if (len > this.presets.maxLength) {
					len = this.presets.maxLength;
				}
				if (len < this.presets.minLength) {
					len = this.presets.minLength;
				}
				return Array.from(Array(len), function () {
					return _this.getRandomChar(selectedCharTypes);
				}).join('');
			}
		}]);

		return PasswordGeneratorCore;
	}();

	PasswordGeneratorCore.presets = {
		length: 16,
		minLength: 6,
		maxLength: 256,
		charTypes: ['numbers', 'uppercase', 'lowercase', 'special'],
		charset: {
			'numbers': '1234567890',
			'uppercase': 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
			'lowercase': 'abcdefghijklmnopqrstuvwxyz',
			'special': '!#$%&()*+,-./:;<=>?@[]^_{|}~'
		}
	};

	var PasswordGeneratorWidget = function () {
		function PasswordGeneratorWidget(options) {
			var _this2 = this;

			_classCallCheck(this, PasswordGeneratorWidget);

			this.CSS_CLASS_NAMES = {
				BUTTON: 'password-generator__button',
				PASSWORD: 'password-generator__password',
				PASSWORD_CONTAINER: 'password-generator__password-container',
				LENGTH: 'password-generator__length',
				LENGTH_CONTAINER: 'password-generator__length-container',
				TOOLBAR: 'password-generator__toolbar',
				PASSWORD_GENERATOR: 'password-generator',
				CLEARFIX: 'clearfix',
				TOOLTIP: 'password-generator__tooltip',
				CHARSET_LIST: 'password-generator__charset-list',
				CHARSET_LIST_LABEL: 'password-generator__charset-list__label',
				CHARSET_LIST_CHECKBOX: 'password-generator__charset-list__checkbox'
			};
			this.SELECTORS = {
				CONTAINER: '#password-generator'
			};
			this.elements = {};
			this.CONSTANTS = { DELAY: 1000 };
			this.MESSAGES = {
				PASSWORD_COPIED: 'copied',
				HIDE: 'hide',
				SHOW: 'show'
			};

			this.passwordOnMouseUpHandler = function (e) {
				var elem = e.target;

				// selects password and copy it to clipboard
				// does not work on iOS devices
				elem.setSelectionRange(0, elem.value.length);
				document.execCommand('copy');
			};

			this.onCopyEventHandler = function (event) {
				if (_this2.elements.tooltip) {
					return;
				}

				//creates notification message
				var tooltip = _this2.createElement('div', { className: _this2.CSS_CLASS_NAMES.TOOLTIP }, [_this2.MESSAGES.PASSWORD_COPIED]);
				_this2.elements.tooltip = tooltip;
				var passwordElem = _this2.elements.password;
				passwordElem.parentNode.insertBefore(tooltip, passwordElem.nextSibling);

				//sets a notification display timeout
				setTimeout(function () {
					tooltip.remove();_this2.elements.tooltip = null;
				}, _this2.CONSTANTS.DELAY);
			};

			this.lenghOnChangeHandler = function (event) {
				var elem = event.target;
				_this2.length = parseInt(elem.value);
			};

			this.buttonClickHandler = function (e) {
				e.preventDefault();
				_this2.elements.password.value = _this2.core.generatePassword(_this2.length, _this2.getCharsetList());
			};

			options = options || {};
			this.core = PasswordGeneratorCore;
			this.createElement = createElement;
			this.length = options.length || this.core.presets.length;
			this.minLength = this.core.presets.minLength;
			this.maxLength = this.core.presets.maxLength;
			this.container = document.querySelector(options.selector || this.SELECTORS.CONTAINER);
			this.charset = options.charset || this.core.presets.charset;
			this.charTypes = options.charTypes || this.core.presets.charTypes;
			this.widget = this.generateWidgetContent(this.container);
			this.assignListeners();
			this.elements.password.value = this.core.generatePassword(this.length);
		}

		_createClass(PasswordGeneratorWidget, [{
			key: 'assignListeners',
			value: function assignListeners() {
				this.elements.button.addEventListener('click', this.buttonClickHandler);
				//shows notification after password was copied
				this.widget.addEventListener('copy', this.onCopyEventHandler);
				this.elements.password.addEventListener('mouseup', this.passwordOnMouseUpHandler);
				this.elements.length.addEventListener('change', this.lenghOnChangeHandler);
			}
		}, {
			key: 'generateWidgetContent',
			value: function generateWidgetContent(widgetContainer) {
				var password = this.createElement('input', { className: this.CSS_CLASS_NAMES.PASSWORD, type: 'text', value: 'password' });
				this.elements.password = password;
				var passwordContainer = this.createElement('div', { className: this.CSS_CLASS_NAMES.PASSWORD_CONTAINER }, [password]);
				var generateButton = this.createElement('input', { className: this.CSS_CLASS_NAMES.BUTTON, type: 'button', value: 'generate' });
				this.elements.button = generateButton;
				var length = this.generateLengthElement();
				this.elements.length = length;
				var lengthContainer = this.createElement('div', { className: this.CSS_CLASS_NAMES.LENGTH_CONTAINER }, [length]);
				var charsetList = this.generateCharsetListElement();
				this.elements.charsetList = charsetList;
				var widget = this.createElement('div', { className: this.CSS_CLASS_NAMES.PASSWORD_GENERATOR + ' ' + this.CSS_CLASS_NAMES.CLEARFIX }, [passwordContainer, generateButton, lengthContainer, charsetList]);
				widgetContainer.appendChild(widget);
				return widget;
			}

			//copies password to clipboard


			//shows "copied" notification

		}, {
			key: 'getCharsetList',
			value: function getCharsetList() {
				var list = this.elements.charsetList.items.slice() || [];
				list = list.filter(function (item) {
					return item.checked;
				}).map(function (item) {
					return item.name;
				});
				return list;
			}
		}, {
			key: 'generateLengthElement',
			value: function generateLengthElement() {
				var container = this.createElement('select', { className: this.CSS_CLASS_NAMES.LENGTH });

				for (var l = 0; l <= this.maxLength - this.minLength; l++) {
					var value = l + this.minLength;
					var option = this.createElement('option', { value: value, innerHTML: value, selected: value === this.length ? true : false });
					container.appendChild(option);
				}

				return container;
			}
		}, {
			key: 'generateCharsetListElement',
			value: function generateCharsetListElement() {
				var container = this.createElement('div', { className: this.CSS_CLASS_NAMES.CHARSET_LIST, items: [] });
				var charset = this.charset;

				for (var str in charset) {
					var input = this.createElement('input', { className: this.CSS_CLASS_NAMES.CHARSET_LIST_CHECKBOX, type: 'checkbox', name: str, value: str, checked: this.charTypes.includes(str) ? true : false });
					var label = this.createElement('label', { className: this.CSS_CLASS_NAMES.CHARSET_LIST_LABEL }, [input, str]);
					container.items.push(input);
					container.appendChild(label);
				}

				return container;
			}
		}]);

		return PasswordGeneratorWidget;
	}();

	window.PasswordGeneratorWidget = PasswordGeneratorWidget;
})();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
