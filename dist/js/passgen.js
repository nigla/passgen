'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

;(function () {
	"use strict";

	var PasswordGeneratorCore = function () {
		function PasswordGeneratorCore() {
			_classCallCheck(this, PasswordGeneratorCore);
		}

		_createClass(PasswordGeneratorCore, null, [{
			key: 'getRandomChar',
			value: function getRandomChar(selectedCharTypes) {
				var types = selectedCharTypes && selectedCharTypes.length && selectedCharTypes || this.presets.charTypes;
				var randomCharType = types[Math.floor(Math.random() * types.length)];
				var charsetByType = this.presets.charset[randomCharType];
				var randomChar = charsetByType[Math.floor(Math.random() * charsetByType.length)];
				return randomChar;
			}
		}, {
			key: 'generatePassword',
			value: function generatePassword(len, selectedCharTypes) {
				var _this = this;

				len = len || this.presets.length;
				if (len > this.presets.maxLength) {
					len = this.presets.maxLength;
				}
				if (len < this.presets.minLength) {
					len = this.presets.minLength;
				}
				return Array.from(Array(len), function () {
					return _this.getRandomChar(selectedCharTypes);
				}).join('');
			}
		}]);

		return PasswordGeneratorCore;
	}();

	PasswordGeneratorCore.presets = {
		length: 16,
		minLength: 6,
		maxLength: 256,
		charTypes: ['numbers', 'uppercase', 'lowercase', 'special'],
		charset: {
			'numbers': '1234567890',
			'uppercase': 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
			'lowercase': 'abcdefghijklmnopqrstuvwxyz',
			'special': '!#$%&()*+,-./:;<=>?@[]^_{|}~'
		}
	};

	var PasswordGeneratorWidget = function () {
		function PasswordGeneratorWidget(options) {
			_classCallCheck(this, PasswordGeneratorWidget);

			this.CSS_CLASS_NAMES = {
				BUTTON: 'password-generator__button',
				HIDE_BUTTON: 'password-generator__hide-button',
				COPY_BUTTON: 'password-generator__copy-button',
				PASSWORD: 'password-generator__password',
				PASSWORD_CONTAINER: 'password-generator__password-container',
				LENGTH: 'password-generator__length',
				LENGTH_CONTAINER: 'password-generator__length-container',
				TOOLBAR: 'password-generator__toolbar',
				PASSWORD_GENERATOR: 'password-generator',
				CLEARFIX: 'clearfix',
				TOOLTIP: 'password-generator__tooltip',
				CHARSET_LIST: 'password-generator__charset-list'
			};
			this.SELECTORS = {
				CONTAINER: '#password-generator'
			};
			this.elements = {};
			this.CONSTANTS = { DELAY: 1000 };
			this.MESSAGES = {
				PASSWORD_COPIED: 'copied',
				HIDE: 'hide',
				SHOW: 'show'
			};

			options = options || {};
			this.core = PasswordGeneratorCore;
			this.createElement = createElement;
			this.length = options.length || this.core.presets.length;
			this.minLength = this.core.presets.minLength;
			this.maxLength = this.core.presets.maxLength;
			this.container = document.querySelector(options.selector || this.SELECTORS.CONTAINER);
			this.charset = options.charset || this.core.presets.charset;
			this.widget = this.generateWidgetContent(this.container);
			this.assignListeners();
			this.elements.password.value = this.core.generatePassword(this.length);
		}

		_createClass(PasswordGeneratorWidget, [{
			key: 'assignListeners',
			value: function assignListeners() {
				this.elements.button.addEventListener('click', this.buttonClickHandler.bind(this));
				//shows notification after password was copied
				this.widget.addEventListener('copy', this.onCopyEventHandler.bind(this));
				this.elements.password.addEventListener('mouseup', this.passwordOnMouseUpHandler.bind(this));
				this.elements.length.addEventListener('change', this.lenghOnChangeHandler.bind(this));
			}
		}, {
			key: 'generateWidgetContent',
			value: function generateWidgetContent(widgetContainer) {
				// const widgetContainer = document.querySelector(id);
				var password = this.createElement('input', { className: this.CSS_CLASS_NAMES.PASSWORD, type: 'text', value: 'password' });
				this.elements.password = password;
				var passwordContainer = this.createElement('div', { className: this.CSS_CLASS_NAMES.PASSWORD_CONTAINER }, [password]);
				var generateButton = this.createElement('input', { className: this.CSS_CLASS_NAMES.BUTTON, type: 'button', value: 'generate' });
				this.elements.button = generateButton;
				var toolbarContainer = this.createElement('div', { className: this.CSS_CLASS_NAMES.TOOLBAR }, [generateButton]);
				var length = this.generateLengthElement();
				var lengthContainer = this.createElement('div', { className: this.CSS_CLASS_NAMES.LENGTH_CONTAINER }, [length]);
				this.elements.length = length;
				var charsetList = this.generateCharsetListElement();
				this.elements.charsetList = charsetList;
				var widget = this.createElement('div', { className: this.CSS_CLASS_NAMES.PASSWORD_GENERATOR + ' ' + this.CSS_CLASS_NAMES.CLEARFIX }, [passwordContainer, toolbarContainer, lengthContainer, charsetList]);
				widgetContainer.appendChild(widget);
				return widget;
			}

			//copies password to clipboard

		}, {
			key: 'passwordOnMouseUpHandler',
			value: function passwordOnMouseUpHandler(e) {
				var elem = e.target;

				// selects password and copy it to clipboard
				// does not work on iOS devices
				elem.setSelectionRange(0, elem.value.length);
				document.execCommand('copy');
			}

			//shows "copied" notification

		}, {
			key: 'onCopyEventHandler',
			value: function onCopyEventHandler(event) {
				var _this2 = this;

				if (this.elements.tooltip) {
					return;
				}

				//creates notification message
				var tooltip = this.createElement('div', { className: this.CSS_CLASS_NAMES.TOOLTIP }, [this.MESSAGES.PASSWORD_COPIED]);
				this.elements.tooltip = tooltip;
				var passwordElem = this.elements.password;
				passwordElem.parentNode.insertBefore(tooltip, passwordElem.nextSibling);

				//sets a notification display timeout
				setTimeout(function () {
					tooltip.remove();_this2.elements.tooltip = null;
				}, this.CONSTANTS.DELAY);
			}
		}, {
			key: 'lenghOnChangeHandler',
			value: function lenghOnChangeHandler(event) {
				var elem = event.target;
				this.length = parseInt(elem.value);
			}
		}, {
			key: 'getCharsetList',
			value: function getCharsetList() {
				var list = this.elements.charsetList.items.slice() || [];
				list = list.filter(function (item) {
					return item.checked;
				}).map(function (item) {
					return item.name;
				});
				return list;
			}
		}, {
			key: 'generateLengthElement',
			value: function generateLengthElement() {
				var container = this.createElement('select', { className: this.CSS_CLASS_NAMES.LENGTH });

				for (var l = 0; l <= this.maxLength - this.minLength; l++) {
					var value = l + this.minLength;
					var option = this.createElement('option', { value: value, innerHTML: value, selected: value === this.length ? true : false });
					container.appendChild(option);
				}

				return container;
			}
		}, {
			key: 'generateCharsetListElement',
			value: function generateCharsetListElement() {
				var container = this.createElement('div', { className: this.CSS_CLASS_NAMES.CHARSET_LIST, items: [] });
				var charset = this.charset;

				for (var str in charset) {
					var input = this.createElement('input', { type: 'checkbox', name: str, value: str, checked: true });
					var label = this.createElement('label', {}, [input, str]);
					container.items.push(input);
					container.appendChild(label);
				}

				return container;
			}
		}, {
			key: 'buttonClickHandler',
			value: function buttonClickHandler(e) {
				e.preventDefault();
				this.elements.password.value = this.core.generatePassword(this.length, this.getCharsetList());
			}
		}]);

		return PasswordGeneratorWidget;
	}();

	window.PasswordGeneratorWidget = PasswordGeneratorWidget;
})();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
